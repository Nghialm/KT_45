/*
insert license info here
*/
using System;
using System.ComponentModel;
using Vns.Erp.Core.Domain;
using System.Runtime.Serialization;
namespace Vns.Erp.Core.Admin.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping adapted by Gustavo And Modified By Hoang Quoc Dung
	/// </summary>

	
	[Serializable]
	[DataContract(Namespace ="http://Vns.Erp.Core.Admin",IsReference=true)]
	public partial class AppLogbook : DomainObject<Guid>, INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }		
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private decimal _log_id; 
		private string _computer_name; 
		private string _windows_user; 
		private string _log_action; 
		private string _log_description; 
		private string _form_name; 
		private decimal _user_id; 
		private string _user_name; 
		private DateTime _log_time; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public AppLogbook()
		{
				_log_id = 0; 
				_computer_name =  String.Empty; 
				_windows_user =  String.Empty; 
				_log_action =  String.Empty; 
				_log_description =  String.Empty; 
				_form_name =  String.Empty; 
				_user_id = 0; 
				_user_name =  String.Empty; 
				_log_time = DateTime.MaxValue; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  decimal LogId
		{
			get { return _log_id; }
			set { _isChanged |= (_log_id != value); _log_id = value; }
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string ComputerName
		{
			get { return _computer_name; }
			set	
			{
				if ( value != null)
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for ComputerName", value, value.ToString());
				
				_isChanged |= (_computer_name != value); _computer_name = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string WindowsUser
		{
			get { return _windows_user; }
			set	
			{
				if ( value != null)
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for WindowsUser", value, value.ToString());
				
				_isChanged |= (_windows_user != value); _windows_user = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string LogAction
		{
			get { return _log_action; }
			set	
			{
				if ( value != null)
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for LogAction", value, value.ToString());
				
				_isChanged |= (_log_action != value); _log_action = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string LogDescription
		{
			get { return _log_description; }
			set	
			{
				if ( value != null)
					if( value.Length > 200)
						throw new ArgumentOutOfRangeException("Invalid value for LogDescription", value, value.ToString());
				
				_isChanged |= (_log_description != value); _log_description = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string FormName
		{
			get { return _form_name; }
			set	
			{
				if ( value != null)
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for FormName", value, value.ToString());
				
				_isChanged |= (_form_name != value); _form_name = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  decimal UserId
		{
			get { return _user_id; }
			set { _isChanged |= (_user_id != value); _user_id = value; }
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string UserName
		{
			get { return _user_name; }
			set	
			{
				if ( value != null)
					if( value.Length > 200)
						throw new ArgumentOutOfRangeException("Invalid value for UserName", value, value.ToString());
				
				_isChanged |= (_user_name != value); _user_name = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  DateTime LogTime
		{
			get { return _log_time; }
			set { _isChanged |= (_log_time != value); _log_time = value; }
			}
			
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		
		#endregion
		
		
		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			AppLogbook castObj = (AppLogbook)obj; 
			return ( castObj != null ) &&
				( this._log_id == castObj.LogId);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _log_id.GetHashCode();
			return hash; 
		}
		#endregion
		
	}
}
