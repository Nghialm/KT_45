/*
insert license info here
*/
using System;
using System.ComponentModel;
using Vns.Erp.Core.Domain;
using System.Runtime.Serialization;
namespace Vns.Erp.Core.Admin.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping adapted by Gustavo And Modified By Hoang Quoc Dung
	/// </summary>

	
	[Serializable]
	[DataContract(Namespace ="http://Vns.Erp.Core.Admin",IsReference=true)]
	public partial class AppUsers : DomainObject<Guid>, INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }		
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _username; 
		private string _fullname; 
		private string _userpassword; 
		private decimal _islocked; 
		private string _email; 
		private string _tel; 
		private DateTime _lastchangepass; 
		private Guid _donvi_id; 
		private DateTime _pass_out_date; 
		private decimal _has_expire; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public AppUsers()
		{
				_username =  String.Empty; 
				_fullname =  String.Empty; 
				_userpassword =  String.Empty; 
				_islocked = 0; 
				_email =  String.Empty; 
				_tel =  String.Empty; 
				_lastchangepass = DateTime.MaxValue; 
				_donvi_id =  new Guid(); 
				_pass_out_date = DateTime.MaxValue; 
				_has_expire = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string Username
		{
			get { return _username; }
			set	
			{
				if ( value != null)
					if( value.Length > 40)
						throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());
				
				_isChanged |= (_username != value); _username = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string Fullname
		{
			get { return _fullname; }
			set	
			{
				if ( value != null)
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Fullname", value, value.ToString());
				
				_isChanged |= (_fullname != value); _fullname = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string Userpassword
		{
			get { return _userpassword; }
			set	
			{
				if ( value != null)
					if( value.Length > 40)
						throw new ArgumentOutOfRangeException("Invalid value for Userpassword", value, value.ToString());
				
				_isChanged |= (_userpassword != value); _userpassword = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  decimal Islocked
		{
			get { return _islocked; }
			set { _isChanged |= (_islocked != value); _islocked = value; }
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string Email
		{
			get { return _email; }
			set	
			{
				if ( value != null)
					if( value.Length > 250)
						throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());
				
				_isChanged |= (_email != value); _email = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  string Tel
		{
			get { return _tel; }
			set	
			{
				if ( value != null)
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for Tel", value, value.ToString());
				
				_isChanged |= (_tel != value); _tel = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  DateTime Lastchangepass
		{
			get { return _lastchangepass; }
			set { _isChanged |= (_lastchangepass != value); _lastchangepass = value; }
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  Guid DonviId
		{
			get { return _donvi_id; }
			set { _isChanged |= (_donvi_id != value); _donvi_id = value; }
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  DateTime PassOutDate
		{
			get { return _pass_out_date; }
			set { _isChanged |= (_pass_out_date != value); _pass_out_date = value; }
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		
		[DataMember]
		public  decimal HasExpire
		{
			get { return _has_expire; }
			set { _isChanged |= (_has_expire != value); _has_expire = value; }
			}
			
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		
		#endregion
		
		
		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			AppUsers castObj = (AppUsers)obj; 
			return ( castObj != null ) &&
                (this.Id == castObj.Id);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * Id.GetHashCode();
			return hash; 
		}
		#endregion
		
	}
}
