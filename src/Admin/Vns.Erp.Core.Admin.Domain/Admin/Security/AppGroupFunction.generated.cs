/*
insert license info here
*/
using System;
using System.ComponentModel;
using Vns.Erp.Core.Domain;
using System.Runtime.Serialization;
namespace Vns.Erp.Core.Admin.Domain
{
    /// <summary>
    ///	Generated by MyGeneration using the NHibernate Object Mapping adapted by Gustavo And Modified By Hoang Quoc Dung
    /// </summary>


    [Serializable]
    [DataContract(Namespace = "http://Vns.Erp.Core.Admin", IsReference = true)]
    public partial class AppGroupFunction : DomainObject<Guid>, INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #region Private Members
        private bool _isChanged;
        private bool _isDeleted;
        private string _group_kyhieu;
        private string _group_ten;
        private Guid _parent_id;
        private decimal _group_order;
        private decimal _group_class;
        private string _resource_name;
        private string _shortcut_key;
        private string _description;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public AppGroupFunction()
        {
            Id = new Guid();
            _group_kyhieu = String.Empty;
            _group_ten = String.Empty;
            _parent_id = new Guid();
            _group_order = 0;
            _group_class = 0;
            _resource_name = String.Empty;
            _shortcut_key = String.Empty;
            _description = String.Empty;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties
        
        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string GroupKyhieu
        {
            get { return _group_kyhieu; }
            set
            {
                if (value != null)
                    if (value.Length > 32)
                        throw new ArgumentOutOfRangeException("Invalid value for GroupKyhieu", value, value.ToString());

                _isChanged |= (_group_kyhieu != value); _group_kyhieu = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string GroupTen
        {
            get { return _group_ten; }
            set
            {
                if (value != null)
                    if (value.Length > 128)
                        throw new ArgumentOutOfRangeException("Invalid value for GroupTen", value, value.ToString());

                _isChanged |= (_group_ten != value); _group_ten = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public Guid ParentId
        {
            get { return _parent_id; }
            set { _isChanged |= (_parent_id != value); _parent_id = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal GroupOrder
        {
            get { return _group_order; }
            set { _isChanged |= (_group_order != value); _group_order = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal GroupClass
        {
            get { return _group_class; }
            set { _isChanged |= (_group_class != value); _group_class = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string ResourceName
        {
            get { return _resource_name; }
            set
            {
                if (value != null)
                    if (value.Length > 64)
                        throw new ArgumentOutOfRangeException("Invalid value for ResourceName", value, value.ToString());

                _isChanged |= (_resource_name != value); _resource_name = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string ShortcutKey
        {
            get { return _shortcut_key; }
            set
            {
                if (value != null)
                    if (value.Length > 32)
                        throw new ArgumentOutOfRangeException("Invalid value for ShortcutKey", value, value.ToString());

                _isChanged |= (_shortcut_key != value); _shortcut_key = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (value != null)
                    if (value.Length > 64)
                        throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());

                _isChanged |= (_description != value); _description = value;
            }
        }


        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return _isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            _isDeleted = true;
            _isChanged = true;
        }

        public AppGroupFunction Clone()
        {
            return (AppGroupFunction)this.MemberwiseClone();
        }
        #endregion


        #region Equals And HashCode Overrides
        /// <summary>
        /// local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj) return true;
            if ((obj == null) || (obj.GetType() != this.GetType())) return false;
            AppGroupFunction castObj = (AppGroupFunction)obj;
            return (castObj != null) &&
                (this.Id == castObj.Id);
        }

        /// <summary>
        /// local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {

            int hash = 57;
            hash = 27 * hash * Id.GetHashCode();
            return hash;
        }
        #endregion

    }
}
