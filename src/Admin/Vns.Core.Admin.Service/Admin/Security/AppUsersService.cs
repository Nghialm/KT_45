/*
insert license info here
*/
using System.Collections;
using System.ComponentModel;
using System.Data;
using System;
using Vns.Erp.Core.Admin.Domain;
using Vns.Erp.Core.Admin.Dao;
using Vns.Erp.Core.Admin.Service.Interface;
using Vns.Erp.Core.Service;
using Vns.Erp.Core.Service.Interface;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using System.ServiceModel.Activation;
using System.ServiceModel;
using System.Security.Permissions;
namespace Vns.Erp.Core.Admin.Service
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping adapted by Gustavo
	/// </summary>	
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	public class AppUsersService:GenericService<AppUsers,Guid>, IAppUsersService
	{
	     public IAppUsersDao AppUsersDao
        {
            get { return (IAppUsersDao)Dao; }
            set { Dao = value; }
        }
         //public AppUsers GetById(decimal USERID)
         //{
         //    return AppUsersDao.Get(USERID);
         //}

         public AppUsers GetLast()
         {
             return AppUsersDao.GetLast();
         }

         public IList<AppUsers> GetUserByDV(Guid DONVI_ID)
         {
             ArrayList props = new ArrayList();
             ArrayList values = new ArrayList();
             props.Add("DonviId");
             values.Add(DONVI_ID);
             return AppUsersDao.List(-1,-1,props,values,null);
         }

         //
         public DataSet GetUserMenu(Guid USERID)
         {
             return null;//Need to check 
             //return AppUsersDao.GetUserMenu(USERID);
         }
        
         public AppUsers GetByUsername(string Username)
         {             
             return AppUsersDao.GetByKey("Username", Username);             
         }

         public AppUsers GetByUsernameAndPass(string Username, string PASSWORD)
         {
             ArrayList props = new ArrayList();
             ArrayList values = new ArrayList();
             props.Add("Username");
             values.Add(Username);
             props.Add("Password");
             values.Add(PASSWORD);
             IList<AppUsers> list = AppUsersDao.List(-1, -1, props, values, null);
             return ((list!=null)&&(list.Count>0))?list[0]:null;
         }

         public IList<AppUsers> GetAll()
         {
             return AppUsersDao.GetAll();
         }

         public void Insert(AppUsers objInfo)
         {
             objInfo.Userpassword = EncryptPassword(objInfo.Username, objInfo.Userpassword);
             AppUsersDao.Save(objInfo);
         }

         public void Update(AppUsers objInfo)
         {
             AppUsersDao.Update(objInfo);
         }
         public void Update(AppUsers objInfo, IList<AppDvGroupUser> listDvGroupUser)
         {
             AppUsersDao.Update(objInfo);
         }
        //[PrincipalPermission(SecurityAction.Demand, Authenticated = true)]
         public void ChangePassword(AppUsers objInfo)
         {
             objInfo.Userpassword = objInfo.Userpassword;
             AppUsersDao.SaveOrUpdate(objInfo);
         }

         public void DeleteById(Guid USERID)
         {
             AppUsersDao.DeleteById(USERID);
         }

         public AppUsers Login(string userName, String password, Guid DonViId)
         {
             AppUsers objInfo = this.GetByUsername(userName.Trim());
             if (objInfo == null) return null;

             string sPassword = this.EncryptPassword(userName, password);
             IAppDvGroupUserService AppDvGroupUserService = (IAppDvGroupUserService)ObjectFactory.GetObject("AppDvGroupUserService");
             IList<AppDvGroupUser>  list = AppDvGroupUserService.GetDVUser(DonViId, objInfo.Id);
             if (list == null) return null;
             bool isInDonVi =(objInfo.DonviId == DonViId) || (DonViId == Guid.Empty);
             for (int i = 0; i < list.Count; i++)
             {
                 if (list[i].DvId == DonViId)
                 {
                     isInDonVi = true;
                 }
             }
             if ((objInfo != null) && (objInfo.Userpassword.Equals(sPassword) && (isInDonVi))) return objInfo;
             else return null;
         }

         public AppUsers LoginWithoutDonvi(string userName, String password)
         {
             AppUsers objInfo = this.GetByUsername(userName.Trim());
             string sPassword = this.EncryptPassword(userName, password);

             if ((objInfo != null) && objInfo.Userpassword.Equals(sPassword)) return objInfo;
             else return null;
         }
         #region "Sercurity Function"
         public string EncryptPassword(string Username, string Password)
         {
             string salt = "Mu1Ig2cnhuugFbWQpRmo4g==";
             return EncodePassword(Username.ToUpper().Trim() + Password, 1, salt);
         }

         private string GenerateSalt()
         {
             byte[] buf = new byte[16];
             RNGCryptoServiceProvider a = new RNGCryptoServiceProvider();
             a.GetBytes(buf);
             return Convert.ToBase64String(buf);
         }

         private string EncodePassword(string pass, int passwordFormat, string salt)
         {
             if (passwordFormat == 0)
             {
                 // MembershipPasswordFormat.Clear
                 return pass;
             }

             byte[] bIn = Encoding.Unicode.GetBytes(pass);
             byte[] bSalt = Convert.FromBase64String(salt);
             byte[] bAll = new byte[bSalt.Length + (bIn.Length - 1) + 1];
             byte[] bRet = null;

             Buffer.BlockCopy(bSalt, 0, bAll, 0, bSalt.Length);
             Buffer.BlockCopy(bIn, 0, bAll, bSalt.Length, bIn.Length);
             if (passwordFormat == 1)
             {
                 // MembershipPasswordFormat.Hashed
                 HashAlgorithm s = HashAlgorithm.Create("SHA1");
                 bRet = s.ComputeHash(bAll);
             }
             else
             {
                 bRet = null;
                 //EncryptPassword(bAll)
             }

             return Convert.ToBase64String(bRet);
         }


         #endregion
	}
}
