/*
insert license info here
*/
using System;
using System.ComponentModel;
using Vns.Erp.Core.Domain;
using System.Runtime.Serialization;
namespace Vns.Erp.Core.Accounting.Domain
{
    /// <summary>
    ///	Generated by MyGeneration using the NHibernate Object Mapping adapted by Gustavo And Modified By Hoang Quoc Dung
    /// </summary>
    [Serializable]
    [DataContract(Namespace = "http://Vns.Erp.Core.Accounting.Domain", IsReference = true)]
    public partial class CtHoadon : DomainObject<Guid>, INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #region Private Members
        private bool _isChanged;
        private bool _isDeleted;
        private Guid _ct_hoadon_id;
        private string _so_hoadon;
        private string _so_seri;
        private string _ten_khachhang;
        private string _dia_chi;
        private DateTime? _ngay_hoadon;
        private string _ma_so_thue;
        private string _dien_giai;
        private Guid _donvi_id;
        private string _ma_donvi;
        private decimal _khong_theo_doi;
        private decimal _tong_tien;
        private decimal _doanh_thu;
        private decimal _tien_thue;
        private decimal _da_thanh_toan;
        private DateTime? _han_thanh_toan;
        private decimal _so_ngay_thanh_toan;
        private Guid _ct_lien_quan;
        private decimal _loai;
        private string _so_tai_khoan_nh;
        private string _hinh_thuc_tt;

        private DateTime _SynDate = Null.MIN_DATE;
        private decimal? _IsDeleted = 0;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public CtHoadon()
        {
            _ct_hoadon_id = new Guid();
            _so_hoadon = String.Empty;
            _so_seri = String.Empty;
            _ten_khachhang = String.Empty;
            _dia_chi = String.Empty;
            _ngay_hoadon = DateTime.MaxValue;
            _ma_so_thue = String.Empty;
            _dien_giai = String.Empty;
            _donvi_id = new Guid();
            _ma_donvi = String.Empty;
            _khong_theo_doi = 0;
            _tong_tien = 0;
            _doanh_thu = 0;
            _tien_thue = 0;
            _da_thanh_toan = 0;
            _han_thanh_toan = DateTime.MaxValue;
            _so_ngay_thanh_toan = 0;
            _ct_lien_quan = new Guid();
            _loai = 0;
            _so_tai_khoan_nh = String.Empty;
            _hinh_thuc_tt = String.Empty;

            _SynDate = Null.MIN_DATE;
            _IsDeleted = 0;
        }
        #endregion // End of Default ( Empty ) Class Constuctor
        public CtHoadon Clone()
        {
            return (CtHoadon)this.MemberwiseClone();
        }
        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public Guid CtHoadonId
        {
            get { return _ct_hoadon_id; }
            set { _isChanged |= (_ct_hoadon_id != value); _ct_hoadon_id = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string SoHoadon
        {
            get { return _so_hoadon; }
            set
            {
                if (value != null)
                    if (value.Length > 64)
                        throw new ArgumentOutOfRangeException("Invalid value for SoHoadon", value, value.ToString());

                _isChanged |= (_so_hoadon != value); _so_hoadon = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string SoSeri
        {
            get { return _so_seri; }
            set
            {
                if (value != null)
                    if (value.Length > 64)
                        throw new ArgumentOutOfRangeException("Invalid value for SoSeri", value, value.ToString());

                _isChanged |= (_so_seri != value); _so_seri = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string TenKhachhang
        {
            get { return _ten_khachhang; }
            set
            {
                if (value != null)
                    if (value.Length > 256)
                        throw new ArgumentOutOfRangeException("Invalid value for TenKhachhang", value, value.ToString());

                _isChanged |= (_ten_khachhang != value); _ten_khachhang = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string DiaChi
        {
            get { return _dia_chi; }
            set
            {
                if (value != null)
                    if (value.Length > 512)
                        throw new ArgumentOutOfRangeException("Invalid value for DiaChi", value, value.ToString());

                _isChanged |= (_dia_chi != value); _dia_chi = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public DateTime? NgayHoadon
        {
            get { return _ngay_hoadon; }
            set { _isChanged |= (_ngay_hoadon != value); _ngay_hoadon = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string MaSoThue
        {
            get { return _ma_so_thue; }
            set
            {
                if (value != null)
                    if (value.Length > 64)
                        throw new ArgumentOutOfRangeException("Invalid value for MaSoThue", value, value.ToString());

                _isChanged |= (_ma_so_thue != value); _ma_so_thue = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string DienGiai
        {
            get { return _dien_giai; }
            set
            {
                if (value != null)
                    if (value.Length > 512)
                        throw new ArgumentOutOfRangeException("Invalid value for DienGiai", value, value.ToString());

                _isChanged |= (_dien_giai != value); _dien_giai = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public Guid DonviId
        {
            get { return _donvi_id; }
            set { _isChanged |= (_donvi_id != value); _donvi_id = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string MaDonvi
        {
            get { return _ma_donvi; }
            set
            {
                if (value != null)
                    if (value.Length > 32)
                        throw new ArgumentOutOfRangeException("Invalid value for MaDonvi", value, value.ToString());

                _isChanged |= (_ma_donvi != value); _ma_donvi = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal KhongTheoDoi
        {
            get { return _khong_theo_doi; }
            set { _isChanged |= (_khong_theo_doi != value); _khong_theo_doi = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal TongTien
        {
            get { return _tong_tien; }
            set { _isChanged |= (_tong_tien != value); _tong_tien = Decimal.Round(value, 0); }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal DoanhThu
        {
            get { return _doanh_thu; }
            set { _isChanged |= (_doanh_thu != value); _doanh_thu = Decimal.Round(value, 0); }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal TienThue
        {
            get { return _tien_thue; }
            set { _isChanged |= (_tien_thue != value); _tien_thue = Decimal.Round(value, 0); }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal DaThanhToan
        {
            get { return _da_thanh_toan; }
            set { _isChanged |= (_da_thanh_toan != value); _da_thanh_toan = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public DateTime? HanThanhToan
        {
            get { return _han_thanh_toan; }
            set { _isChanged |= (_han_thanh_toan != value); _han_thanh_toan = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal SoNgayThanhToan
        {
            get { return _so_ngay_thanh_toan; }
            set { _isChanged |= (_so_ngay_thanh_toan != value); _so_ngay_thanh_toan = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public Guid CtLienQuan
        {
            get { return _ct_lien_quan; }
            set { _isChanged |= (_ct_lien_quan != value); _ct_lien_quan = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public decimal Loai
        {
            get { return _loai; }
            set { _isChanged |= (_loai != value); _loai = value; }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string SoTaiKhoanNh
        {
            get { return _so_tai_khoan_nh; }
            set
            {
                if (value != null)
                    if (value.Length > 32)
                        throw new ArgumentOutOfRangeException("Invalid value for SoTaiKhoanNh", value, value.ToString());

                _isChanged |= (_so_tai_khoan_nh != value); _so_tai_khoan_nh = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>		

        [DataMember]
        public string HinhThucTt
        {
            get { return _hinh_thuc_tt; }
            set
            {
                if (value != null)
                    if (value.Length > 32)
                        throw new ArgumentOutOfRangeException("Invalid value for HinhThucTt", value, value.ToString());

                _isChanged |= (_hinh_thuc_tt != value); _hinh_thuc_tt = value;
            }
        }


        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return _isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        [DataMember]
        public Decimal? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if (value == null)
                    _IsDeleted = 0;
                else
                    _IsDeleted = value;
            }
        }

        [DataMember]
        public DateTime SynDate
        {
            get { return _SynDate; }
            set { _isChanged |= (_SynDate != value); _SynDate = value; }
        }
        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            _isDeleted = true;
            _isChanged = true;
        }


        #endregion


        #region Equals And HashCode Overrides
        /// <summary>
        /// local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj) return true;
            if ((obj == null) || (obj.GetType() != this.GetType())) return false;
            CtHoadon castObj = (CtHoadon)obj;
            return (castObj != null) &&
                (this._ct_hoadon_id == castObj.CtHoadonId);
        }

        /// <summary>
        /// local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {

            int hash = 57;
            hash = 27 * hash * _ct_hoadon_id.GetHashCode();
            return hash;
        }
        #endregion

    }
}
